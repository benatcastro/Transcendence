version: '3.7'
services:
  frontend:
    container_name: frontend
    restart: always
    build:
      context: ./frontend
    expose:
      - "3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    env_file:
      - .env
  nginx:
    container_name: nginx
    build: ./nginx
    ports:
      - "8080:8080"
      - "443:443"
      - "1024:1024"
    volumes:
      - ./static_volume:/home/app/microservice/static
    depends_on:
      - django
    restart: always
  redis:
    container_name: redis
    image: "redis:latest"
    expose:
      - "6379"
    restart: always
  django:
    container_name: django
    build: ./django
    command: sh -c "python manage.py makemigrations &&
                    python manage.py migrate &&
                    daphne project.asgi:application -b 0.0.0.0  -e ssl:442:privateKey=localhost.crt:certKey=localhost.key || tail -f" #https://github.com/django/daphne
    volumes:
      - ./static_volume:/home/app/microservice/static
    env_file: .env
    ports:
       - "8000:8000"
    image: trascendence_app
    expose:
      - ${APP_PORT}
      - "442"
    restart: always
    depends_on:
      - db
      - redis

  node_exporter:
    image: prom/node-exporter
    volumes:
      - "/proc:/host/proc:ro"
      - "/sys:/host/sys:ro"
      - "/:/rootfs:ro"
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points'
      - '^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    restart: always

  cadvisor:
    privileged: true
    container_name: cadvisor
    image: gcr.io/cadvisor/cadvisor:latest
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/kmsg:/dev/kmsg
    ports:
      - "9150:8080"
    restart: always

  db:
    container_name: postgres
    image: postgres:16.1-alpine3.18
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ${DB_DATA_PATH}:/var/lib/postgresql/data/
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - PGPORT=${DB_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
    ports:
      - "5432:5432"
    restart: always
  
  postgres_exporter:
    image: wrouesnel/postgres_exporter
    environment:
      DATA_SOURCE_NAME: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${DB_PORT}/${POSTGRES_DB}?sslmode=disable
    ports:
      - "9187:9817"
    depends_on:
      - db
    restart: always

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    expose:
      - "6000"
    volumes:
      - ./data/grafana-data:/var/lib/grafana
      - ./grafana/config_data_sources.yml:/etc/grafana/provisioning/datasources/config_data_sources.yml
      - ./grafana/default.yml/:/etc/grafana/provisioning/dashboards/default.yml
      - ./grafana/dashboards/.:/usr/share/grafana/public/mydashboards    
    user: "${UID}:${GID}"
    env_file: .env

    restart: always
  prometheus:
    container_name: prometheus
    restart: always
    image: prom/prometheus
    volumes: 
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/rules.yml:/etc/prometheus/rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus/'
      - '--storage.tsdb.retention.time=30d'    
    expose:
      - "9090:9090"
  alertmanager:
    container_name: alertmanager
    image: prom/alertmanager
    volumes:
      - ./alertmanager/config_mod.yml:/etc/alertmanager/config_mod.yml
    ports:
      - "9093:9093"
    env_file:
      - .env
    command:
      - '--config.file=/etc/alertmanager/config_mod.yml'
    restart: always
  blackbox_exporter:
    image: prom/blackbox-exporter:latest
    volumes:
      - ./blackbox_exporter/config.yml:/etc/blackbox_exporter/config.yml
    ports:
      - "9115:9115"
volumes:
  postgres_data:
  static_volume:
  grafana-data:
  prometheus_data:
