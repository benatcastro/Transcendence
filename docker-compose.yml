version: '3.7'
services:
  frontend:
    container_name: frontend
    restart: always
    build:
      context: ./frontend
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
  nginx:
    container_name: nginx
    build: ./nginx
    ports:
      - "80:80"
      - "90:90"
      - "8080:8080"
      - "82:82"
    volumes:
      - ./static_volume:/home/app/microservice/static
    depends_on:
      - django
    restart: "on-failure"
  redis:
    container_name: redis
    image: "redis:latest"
    expose:
      - "6379"
  django:
    container_name: django
    build: ./django
    command: sh -c "python manage.py makemigrations &&
                    python manage.py migrate &&
                    uvicorn project.asgi:application --host 0.0.0.0 --port ${APP_PORT} --reload"
    volumes:
      - .:/microservice
      - ./static_volume:/home/app/microservice/static
      - ./django:/home/app/webapp
    env_file: .env
    environment:
      - DJANGO_SETTINGS_MODULE=project.settings
    ports:
      - "8000:8000"
    image: trascendence_app
    expose:
      - ${APP_PORT}
    restart: "on-failure"
    depends_on:
      - db
      - redis

  node_exporter:
    image: prom/node-exporter
    volumes:
      - "/proc:/host/proc:ro"
      - "/sys:/host/sys:ro"
      - "/:/rootfs:ro"
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points'
      - '^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    restart: always

  cadvisor:
    privileged: true
    container_name: cadvisor
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/kmsg:/dev/kmsg
    ports:
      - "9150:8080"
    restart: always



  db:
    container_name: postgres
    image: postgres:16.1-alpine3.18
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ${DB_DATA_PATH}:/var/lib/postgresql/data/
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - PGPORT=${DB_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
    ports:
      - "5432:5432"
    restart: "on-failure"
  
  postgres_exporter:
    image: wrouesnel/postgres_exporter
    environment:
      DATA_SOURCE_NAME: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${DB_PORT}/${POSTGRES_DB}?sslmode=disable
    ports:
      - "9187:9817"
    depends_on:
      - db

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    expose:
      - "3000"
    volumes:
      - ./data/grafana-data:/var/lib/grafana
    user: "${UID}:${GID}"
    environment:
      - GF_AUTH_GITHUB_ENABLED=${ENABLE_GIT}
      - GF_AUTH_DISABLE_LOGIN_FORM=${GRAFANA_DISABLE_LOGIN_BASIC}
        #- GF_AUTH_GENERIC_OAUTH_ENABLED=true
      - GF_AUTH_GITHUB_CLIENT_ID=${G_CLIENT}
      - GF_AUTH_GITHUB_CLIENT_SECRET=${G_SECRETS}
      - GF_AUTH_GENERIC_OAUTH_NAME=${AUTH_NAME}
      - GF_AUTH_GENERIC_OAUTH_URL=${GENERIC_OUTH_URL}
      - GF_AUTH_GENERIC_OAUTH_TOKEN_URL=${GENERIC_OUT_PATH}
      - GF_PROMETHEUS_DATASOURCE_HTTP_ENCRYPTION=${PROMETHEUS_HTTP_ENC}
      - GF_PROMETHEUS_DATASOURCE_HTTP_ENCRYPTION_KEY=${PROMETHEUS_PASS_ENC}
      - GF_PROMETHEUS_DATASOURCE_URL=${PROMETHEUS_DATASOURCE}
        #- GF_AUTH_GENERIC_OAUTH_REQUIRE_2FA=true
      - GF_AUTH_GENERIC_OAUTH_ALLOWED_ORGANIZATIONS=outhcyberpunk
        #- GF_LOG_LEVEL=debug
      - GF_AUTH_GITHUB_ALLOWED_ORGANIZATIONS=${GIT_ORG}
      - GF_AUTH_GITHUB_AUTO_LOGIN=${GIT_AUTH_LOGIN}
      - GF_AUTH_GENERIC_OAUTH_SCOPES=${GF_SCOPE}
      - GF_AUTH_GENERIC_OAUTH_ALLOW_SIGN_UP=${GIT_AUTH_LOGIN}
        #- GF_AUTH_GITHUB_ALLOW_ASSIGN_GRAFANA_ADMIN=true
        #- GF_SERVER_ROOT_URL=http://localhost:3000
        #- GF_AUTH_GENERIC_OAUTH_ALLOW_ASSIGN_GRAFANA_ADMIN=true
      - GF_SERVER_HTTP_PORT=${GF_PORT}
      - GF_SERVER_PROTOCOL=${GF_PROTOCOL}
      - GF_SERVER_DOMAIN=${GF_DOMAIN}
      - GF_SERVER_ROOT_URL=${GF_SERV_ROOT}
      - GF_SERVER_SERVE_FROM_SUB_PATH=${ACTIVATE_SERV_ROOT}
      - GF_AUTH_GITHUB_ROLE_ATTRIBUTE_PATH=${GIT_ROLE}
      - GF_AUTH_GITHUB_API_URL=${GIT_USER_API}
      - GF_AUTH_GITHUB_ALLOW_SIGN_UP=true
    restart: "on-failure"
  prometheus:
    container_name: prometheus
    restart: "on-failure"
    image: prom/prometheus
    volumes: 
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    expose:
      - "9090"

volumes:
  postgres_data:
  django_sources:
  static_volume:
  grafana-data:
